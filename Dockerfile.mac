# Stage 1: Build the Go application
FROM golang:1.23-alpine AS builder

# Accept build-time variables
ARG POSTGRESQL_DATABASE
ARG RELAYER_URL

# Set environment variables at runtime
ENV POSTGRESQL_DATABASE=${POSTGRESQL_DATABASE}
ENV RELAYER_URL=${RELAYER_URL}

# Set the current working directory inside the container
WORKDIR /app

# Copy the Go module files and download dependencies
COPY go.mod go.sum ./
RUN go mod download

# RUN go mod download github.com/btcsuite/btcd/chaincfg/chainhash@v1.0.1

# Copy the rest of the application source code
COPY . .

# Build the Go application
RUN go build -o main .

RUN go mod tidy

# Stage 2: Create a lightweight image to run the Go application
FROM alpine:latest

# Set the current working directory inside the container
WORKDIR /root/

# Copy the binary built in the previous stage
# Copy the compiled binary from the builder container
COPY --from=builder /app/main .

# Copy the .env file
COPY .env .

RUN apk add --no-cache bash

# Expose port if necessary (e.g., if your Go app listens on a port)
EXPOSE 8008

# Set an entrypoint or command to run the Go application
CMD ["./main"]